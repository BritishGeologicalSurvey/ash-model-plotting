import argparse
import glob
from pathlib import Path

import iris


def name_to_netcdf(source_dir, prefix=None, output_dir=None, output_name=None):
    """
    Convert all NAME files in a given directory to single NetCDF file.

    :param source_dir:
    :param prefix:
    :param output_dir:
    :param output_name:
    """
    source_dir = Path(source_dir)
    source_files = glob.glob(
        str(source_dir.absolute().joinpath(prefix + '*.txt')))

    cubes = iris.load(source_files)

    if output_dir:
        output_dir = Path(output_dir)
    else:
        output_dir = source_dir

    if not output_name:
        titles = set(c.attributes['Title'] for c in cubes)
        output_name = f"{'_'.join(titles)}_NAME_output.nc"

    output_path = output_dir.joinpath(output_name)

    iris.save(cubes, output_path)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Convert NAME output (.txt) files into a NetCDF file.')
    parser.add_argument(
        'source_dir',
        help="Path to directory containing NAME files")
    parser.add_argument(
        '--prefix',
        help="Filename prefix e.g. Air_Conc_grid_ for filtering",
        default='')
    parser.add_argument(
        '--output_dir',
        help="Path to directory for output file (defaults to source_dir)",
        default=None)
    parser.add_argument(
        '--output_name',
        help="Name for output file (default is autogenerated from metadata)",
        default=None)
    args = parser.parse_args()
    name_to_netcdf(
        args.source_dir, prefix=args.prefix,
        output_dir=args.output_dir, output_name=args.output_name)
